# -*- coding: utf-8 -*-
"""Cluster / Questions

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10Bxwcm--fQch8mWGAJi2BrJOvNz1YQRH
"""

Disciplina = "MT" # @param ["CN", "MT", "LC", "CH"]
flashname = ''
if Disciplina=='MT':
  flashname = 'Matemática'
elif Disciplina == 'CN':
  flashname = 'Natureza'
elif Disciplina == 'CH':
  flashname == 'Humanas'
else:
  flashname = 'Linguagens'

colunaCluster = "theta_065" # @param ['theta_065', 'theta_080', 'theta_099', 'NU_PARAM_A', 'NU_PARAM_B', 'NU_PARAM_C', 'CO_POSICAO', 'SG_AREA', 'CO_ITEM', 'TX_GABARITO', 'CO_HABILIDADE', 'IN_ITEM_ABAN', 'TX_MOTIVO_ABAN', 'TX_COR', 'CO_PROVA', 'TP_LINGUA', 'IN_ITEM_ADAPTADO', 'ANO', 'PercentEspAcerto']
column_for_clustering = colunaCluster

"""## Código"""

!pip install pycaret

import pandas as pd
from pycaret.clustering import *
import matplotlib.pyplot as plt
import os
urlItens = "https://github.com/NiedsonEmanoel/NiedsonEmanoel/raw/main/enem/An%C3%A1lise%20de%20Itens/OrdenarPorTri/gerador/provasOrdernadasPorTri.csv"

dItens = pd.read_csv(urlItens, encoding='utf-8', decimal=',')

#Splicing da Disciplina
dItens = dItens[dItens['SG_AREA'] == Disciplina]

# Selecionar a coluna desejada
selected_column = dItens[[column_for_clustering]]  # Converta em DataFrame

# Configurar o clustering usando a coluna específica
clusterA = setup(selected_column, normalize=True)

# Criar o modelo K-Means
model = create_model('kmeans')

# Avaliar o modelo
evaluate_model(model)

# Atribuir os clusters a cada item
assigned_clusters = assign_model(model)

# Adicionar as atribuições de cluster ao DataFrame original
del assigned_clusters[column_for_clustering]
dItens_with_clusters = pd.concat([dItens, assigned_clusters], axis=1)

# Exportar itens de cada cluster para arquivos CSV separados
unique_clusters = dItens_with_clusters['Cluster'].unique()
for cluster in unique_clusters:
    cluster_items = dItens_with_clusters[dItens_with_clusters['Cluster'] == cluster]
    cluster_csv_name = f'{Disciplina}_{column_for_clustering}_{cluster}.csv'
    cluster.replace(' ', '')
    cluster_items.to_csv(cluster_csv_name, index=False, encoding='utf-8', decimal=',')
    print(f"Arquivo CSV para o cluster {cluster} foi exportado como {cluster_csv_name}")

dItens_with_clusters.to_csv(Disciplina+'_CLUSTERED_'+colunaCluster+'.csv', index=False, encoding='utf-8', decimal=',')

import glob

# Lista todos os arquivos CSV no diretório atual
csv_files = glob.glob('*.csv')

# Dicionário para armazenar os data frames, usando o nome do arquivo como chave
dfs = {}

# Loop através de cada arquivo CSV e criar um data frame para cada um
for csv_file in csv_files:
    # Obtém o nome do cluster do nome do arquivo
    cluster_name = csv_file.split('_')[-1].split('.')[0]

    # Lê o arquivo CSV para um data frame
    df = pd.read_csv(csv_file, encoding='utf-8', decimal=',')

    # Adiciona uma coluna 'Cluster' com o nome do cluster para referência
    df['Cluster'] = cluster_name

    # Armazena o data frame no dicionário
    dfs[cluster_name] = df

# Exibe os data frames
for cluster_name, df in dfs.items():
    print(f"Data Frame para o cluster {cluster_name}:")
    df.describe()

list(dfs.keys())[0]

DfC0 = dfs.get(list(dfs.keys())[4])
DfC0[colunaCluster].describe()