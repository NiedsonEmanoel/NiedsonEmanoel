# api.R
library(plumber)
library(mirt)
# Função para calcular os fscores
calcular_fscores <- function(dataParam) {
a <- as.numeric(dataParam$a)  # lista de números para a
b <- as.numeric(dataParam$b)  # lista de números para b
c <- as.numeric(dataParam$c)  # lista de números para c
r <- as.numeric(dataParam$r)  # lista de números para r
d <- -a * b
sv <- mirt(dados, 1, itemtype = '3PL', pars = 'values')
# PARAMETRO A
sv$value[sv$name == 'a1'] <- a
# PARAMETRO B
sv$value[sv$name == 'd'] <- d
# PARAMETRO C
sv$value[sv$name == 'g'] <- c
sv$est <- FALSE
# CRIAÇÃO DO MODELO
mod3 <- mirt(dados, 1, pars = sv)
# Cálculo dos fscores usando a lista r
result <- (fscores(mod3, response.pattern = r) * 100) + 500
return(result)
}
# Cria um objeto Plumber
pr <- plumb("api.R")
#install.packages("mirt")
library(mirt)
# install.packages("devtools")
# devtools::install_github("masurp/ggmirt")
library(ggmirt)
#install.packages("tidyverse")
library(tidyverse)
dados <- sim_irt(500, 45)
caminho_leitura <- file.path(caminho_pasta_script, "datatri.csv")
dataParam = read.table(caminho_leitura, sep=',', h=T)
a <- as.numeric(gsub(",", ".", dataParam[,8]))
b <- as.numeric(gsub(",", ".", dataParam[,9]))
c <- as.numeric(gsub(",", ".", dataParam[,10]))
d <- -a*b
#COLOCANDO VALORES PADRÕES NOS ITENS
sv <- mirt(dados, 1, itemtype = '3PL', pars = 'values')
#PARAMETRO A                  #I1 #I2  #I3...
sv$value[sv$name == 'a1'] <- a
#PARAMETRO B
sv$value[sv$name == 'd'] <- d
#PARAMETRO C
sv$value[sv$name == 'g'] <- c
sv$est <- FALSE
#CRIAÇÃO DO MODELO
mod3 <- mirt(dados, 1, pars = sv)
#Extrai os coeficientes e salva em um data frame
coeficientes <- coef(mod3, simplify=TRUE, IRTpars=TRUE)
round(coeficientes$items, 3)
l <- (fscores(mod3, response.pattern = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), method = 'EAP')*100)+500
l
l['F1']
l.F1
print(l)
# Calcular apenas F1 sem incluir SE_F1
l <- fscores(mod3, response.pattern = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), method = 'EAP') * 100 + 500
# Mostrar o valor de F1
print(l)
fscores_result <- fscores(mod3, response.pattern = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), method = 'EAP') * 100 + 500
# Extrair apenas os valores de F1
l <- fscores_result[, "F1"]
# Mostrar os valores de F1
print(l)
library(plumber)
r <- plumb("app.R")
# get port number from environment variable
port <- 8080
r$run(port=port, host='0.0.0.0', swagger=TRUE)
library(plumber)
r <- plumb("app.R")
# get port number from environment variable
port <- 8080
r$run(port=port, host='0.0.0.0', swagger=TRUE)
library(plumber)
r <- plumb("app.R")
# get port number from environment variable
port <- 8080
r$run(port=port, host='0.0.0.0', swagger=TRUE)
library(plumber)
r <- plumb("app.R")
# get port number from environment variable
port <- 8080
r$run(port=port, host='0.0.0.0', swagger=TRUE)
p
caminho_leitura <- file.path(caminho_pasta_script, "datatri.csv")
caminho_pasta_script <- getwd()
caminho_leitura <- file.path(caminho_pasta_script, "datatri.csv")
dataParam = read.table(caminho_leitura, sep=',', h=T)
library(plumber)
r <- plumb("app.R")
# get port number from environment variable
port <- 8080
r$run(port=port, host='0.0.0.0', swagger=TRUE)
library(plumber)
r <- plumb("app.R")
# get port number from environment variable
port <- 8080
r$run(port=port, host='0.0.0.0', swagger=TRUE)
library(plumber)
r <- plumb("app.R")
# get port number from environment variable
port <- 8080
r$run(port=port, host='0.0.0.0', swagger=TRUE)
library(plumber)
r <- plumb("app.R")
# get port number from environment variable
port <- 8080
r$run(port=port, host='0.0.0.0', swagger=TRUE)
library(plumber)
r <- plumb("app.R")
# get port number from environment variable
port <- 8080
r$run(port=port, host='0.0.0.0', swagger=FALSE)
